# Come un'introduzione
{: .heading-0}

Ci hanno chiesto: *ma cosa avete da protestare*? *Cos'è che non vi convince*? 

In effetti ci sono delle questioni generali che ci rendono perplessi e che vorremmo condividere con voi.


## Partire dalle definizioni
{: .heading-2}

Prima di tutto, sarebbe opportuno avere delle definizioni condivise dei termini. Nessuno ha in tasca *il significato vero* di *coding* e *pensiero computazionale*, ma quando se ne parla si rischia di non capirsi. Ci sembra importante almeno, censirne i diversi usi e citare i riferimenti (da [Papert](http://www.papert.org) a [Wing](https://www.cs.cmu.edu/~15110-s13/Wing06-ct.pdf) passando per la definizione dell'[ISTE](http://www.iste.org/docs/ct-documents/computational-thinking-operational-definition-flyer.pdf)), esplorare le implicazioni di ognuna ed imparare a non confonderle. *Coding* non è una parola italiana e forse noi italiani non abbiamo una completa percezione dell'aura semantica che invece ha per un parlante inglese. *Coding* è anche un termine tecnico: informatici e non informatici di sicuro gli collegano pratiche diverse.

## Gli obiettivi del coding a scuola
{: .heading-2}

Forse la prima e più importante questione, è quella finale. Quali sono gli obiettivi dell'introduzione del *coding* a scuola ed in particolare nella primaria? C'è una sovrabbondanza di motivazioni che sono diverse ma persino in contrasto. C'è chi fa riferimento allo sviluppo di competenze trasversali utili sempre e dovunque e chi all'acquisizione di competenze specifiche, che saranno spendibili in futuro lavorativamente; c'è chi sottolinea l'importanza di affinare il *pensiero critico* e chi invece punta su quello *logico-algoritmico*; c'è infine che parla di aspetti affettivi, di genere, di collaborazione. Non è un po' troppo per un'attività sola? Oppure sono attività diverse (imparare il *coding* come tecnica distinto dalla sua applicazione in un ambito specifico)?

## Come fare coding a scuola
{: .heading-2}

Gli obiettivi si portano dietro delle scelte. Per esempio: partire a 5 anni, a 8 od a 11? Fare coding un'ora alla settimana o all'interno delle altre *materie*? Solo in ambito scientifico o anche in quello linguistico (artistico, musicale o altro)? Sappiamo bene che soprattutto nella scuola primaria la divisione in ore è piuttosto criticabile e non vorremmo che il *coding*, invece di migliorare la situazione, non facesse che peggiorarla.

*Coding* però non è solo una pratica didattica suggerita o raccomandata, è anche un oggetto di investimento di risorse pubbliche e di direttive ministeriali. Si è parlato ad esempio, delle *60 ore di coding alla materna dal prossimo anno*: quali sono le implicazioni organizzative e quelle economiche? Chi dovrà gestire quelle *sessanta ore* ed al posto di cosa? C'è poi la questione delle competenze necessarie: solo tecniche o anche pedagogiche? Come si acquisiranno? Come si valuteranno?

## Investimenti pubblici, *sponsor* privati: un nuovo mercato
{: .heading-2}

Questo tema è legato alla presenza di attori privati sul campo. [Code.org](http://code.org/) ma anche il progetto [Programma il Futuro](http://programmailfuturo.it/), hanno degli sponsor o dei partner; ma oltre a questi, diverse altre aziende si sono proposte con ambienti online, strumenti mobile, seminari, campi estivi. Vorremmo vederci chiaro: che garanzie vengono date sull'imparzialità di queste meritorie iniziative? Tante volte si è visto il fenomeno dell'imprinting digitale: se ad un novizio viene presentato un ambiente, poi quello sarà il suo ambiente d'elezione in futuro. Significa che stiamo creando un mercato?

![Hiroshima Mon Amour](/images/film-3.jpg "Hiroshima Mon Amour")
{: .img-full}

## Un po' di etica non guasta 
{: .heading-2}

Spesso viene associato il *pensiero computazionale* al *pensiero critico* (ad esempio, nelle indicazioni del [bando MIUR](http://www.istruzione.it/scuola_digitale/curricoli_digitali.shtml) per i curriculi digitali). Condividiamo questa associazione perché riteniamo che gli aspetti etici siano importanti quanto quelli cognitivi. Parlare di *coding* può servire anche a rendere consapevoli docenti e studenti degli interessi, insieme a dei portatori di interesse, che sono legati indissolubilmente al digitale. Se si parla di robotica, va affrontato anche il tema della fine del lavoro come lo conosciamo oggi. Se si parla di *remix* va affrontato il tema del *copyright*. La scelta dell'**open source** – a cui noi come gruppo aderiamo – *non è solo una scelta di gratuità*, ma implica anche la possibilità di modifica e di personalizzazione, di valutazione della sicurezza e garanzia di privacy; inoltre è anche una modalità di lavoro che non è basata sul commercio di licenze ma sulla costruzione e messa a disposizione di competenze pregiate. Se ne parla a nostro avviso troppo poco: perché ad esempio, non viene presa nella dovuta considerazione la licenza dell'ambiente proposto?

## Ambienti e linguaggi
{: .heading-2}

Un altro tema su cui ci piacerebbe che ci fosse più consapevolezza è quello dell'ambiente/linguaggio. Il *coding* è troppo legato all'ambiente [Scratch](https://scratch.mit.edu/), che ha precise caratteristiche tecniche (online o locale ma con *runtime* proprietario il cui sviluppo è praticamente abbandonato, visuale ed estemamente semplificato) ed a Code.org, che ne ha altrettante pedagogiche (progressione per problemi di difficoltà crescente, autonomia, comunità on line). Pur riconoscendo a *Scratch* e a i suoi creatori mille qualità, perché questo plebiscito? Perché così pochi cercano delle alternative? Ce ne sono ormai moltissime. Perché non confrontarle e scegliere quella più opportuna in funzione del contesto, del livello, degli obiettivi?

![Hiroshima Mon Amour](/images/film-4.jpg "Hiroshima Mon Amour")
{: .img-full}

## Linguaggio visuale o testuali?
{: .heading-2}

*Scratch* è sinonimo di *linguaggio visuale*, anche se di reale linguaggio visuale non si tratta quanto di un ambiente visuale. Ci pare interessante andare ad analizzarne le caratteristiche e valutare i vantaggi di questa scelta: per tutti è sempre più facile partire con i blocchi? Cosa si perde, rispetto alla maggiore potenza del codice scritto? Che succederà poi? Come si gestisce la transizione ai più tradizionali linguaggi testuali?

## Questioni di genere
{: .heading-2}

Un tema scarsamente citato, ma che ci pare importante è quello del *genere*. Si è detto che il coding contribuisce a superare le differenze, perché anche le bambine (o le insegnanti?) possono programmare. Questa dichiarazione si poggia su una delle motivazioni principali di progetti come Code.org, ovvero superare la tradizionale scarsità di donne negli ambiti lavorativi *STEM* ed in particolare in campo informatico. Siamo però sicuri che la maniera di insegnare il coding sia così indifferente al genere? La competizione, il superamento di problemi di difficoltà crescente, sono stimoli che hanno la stessa potenza per ragazze e ragazzi? L'identificazione con un robot/avatar (il *gattino*) non pone altri interrogativi?

## L'insostenibile trasversalità del "coding"
{: .heading-2}

Sembra che il *Coding* sia fortemente trasversale rispetto alle diverse discipline o ambiti disciplinari, in particolare nella Scuola Primaria.
È vero che si trovano esperienze diverse (per lo più aritmetica e qualcosa di grammatica), ma siamo sicuri che basti questo per parlare di *approccio trasversale*?



![Hiroshima Mon Amour](/images/film-11.jpg "Hiroshima Mon Amour")
{: .img-full}
